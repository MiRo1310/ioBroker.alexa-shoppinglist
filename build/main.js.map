{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["'use strict';\n\n/*\n * Created with @iobroker/create-adapter v2.0.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\n\nimport * as utils from '@iobroker/adapter-core';\nimport { addPosition } from './app/addPosition';\nimport { updateListsOnChange } from './app/updateListsOnChange';\nimport { deleteOrSetAsCompleted } from './app/deleteOrSetAsCompleted';\nimport { shiftPosition } from './app/shiftPosition';\nimport { timeout } from './app/timeout';\nimport { adapterIds, initAlexaInstanceValues } from './app/ids';\nimport type { OnMessageObj, ShoppingList, SortByTime1Alpha2 } from './types/types';\nimport { isStateValue } from './lib/utils';\nimport { getAlexaDevices } from './app/getAlexaDevices';\nimport { getShoppingLists } from './app/getShoppingLists';\n\nexport default class AlexaShoppinglist extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'alexa-shoppinglist',\n        });\n        this.on('ready', this.onReady.bind(this));\n        // @ts-expect-error\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    async onReady(): Promise<void> {\n        const adapter = this;\n        await this.setState('info.connection', false, true);\n\n        const {\n            shoppinglist: idAlexa2ListJson,\n            device: idAlexaEchoDotTextToCommand,\n            doNotMovetoInactiv: directDelete,\n        } = this.config;\n\n        // const state = await this.getForeignState(shoppingListId, () => {});\n        //\n        // if (!state) {\n        //     this.log.error(`The DataPoint ${shoppingListId} was not found!`);\n        //     return;\n        // }\n        initAlexaInstanceValues(adapter, idAlexa2ListJson);\n        const { getAdapterIds, validateIds } = adapterIds();\n\n        let positionToShift = 0;\n        let jsonActive: ShoppingList[] = [];\n        let jsonInactive: ShoppingList[] = [];\n\n        const idSortActiveState = await this.getStateAsync(getAdapterIds.idSortActiveList);\n        const idSortInActiveState = await this.getStateAsync(getAdapterIds.idSortInActiveList);\n\n        let sortListActive: SortByTime1Alpha2 = idSortActiveState?.val\n            ? (String(idSortActiveState.val) as SortByTime1Alpha2)\n            : '1';\n\n        let sortListInActive: SortByTime1Alpha2 = idSortInActiveState?.val\n            ? (String(idSortInActiveState.val) as SortByTime1Alpha2)\n            : '1';\n\n        this.log.info('Alexa State was found');\n        await this.setState('info.connection', true, true);\n        ({ jsonInactive, jsonActive } = await updateListsOnChange(\n            adapter,\n            sortListActive,\n            sortListInActive,\n            idAlexa2ListJson,\n        ));\n\n        let valueOld: ioBroker.StateValue = null;\n        const {\n            isToInActiveList,\n            isDeleteActiveList,\n            isDeleteInActiveList,\n            isToActiveList,\n            isPositionToShift,\n            isAddPosition,\n        } = validateIds;\n\n        this.on('stateChange', async (id, state) => {\n            if (state?.val && state?.val !== valueOld) {\n                valueOld = state.val;\n                try {\n                    if (id === idAlexa2ListJson) {\n                        ({ jsonInactive, jsonActive } = await updateListsOnChange(\n                            adapter,\n                            sortListActive,\n                            sortListInActive,\n                            idAlexa2ListJson,\n                        ));\n                        if (directDelete && jsonInactive[0]) {\n                            this.log.debug('Delete inactive list');\n                            await deleteOrSetAsCompleted(adapter, jsonInactive, '#delete');\n                        }\n                    }\n\n                    if (\n                        isStateValue(state, 'string') &&\n                        (id === getAdapterIds.idSortActiveList || id === getAdapterIds.idSortInActiveList)\n                    ) {\n                        if (id === getAdapterIds.idSortActiveList) {\n                            sortListActive = state.val as SortByTime1Alpha2;\n                        } else {\n                            sortListInActive = state.val as SortByTime1Alpha2;\n                        }\n\n                        ({ jsonActive, jsonInactive } = await updateListsOnChange(\n                            adapter,\n                            sortListActive,\n                            sortListInActive,\n                            idAlexa2ListJson,\n                        ));\n                        await this.setState(id, { ack: true });\n                    }\n\n                    if (isStateValue(state, 'string') && isAddPosition(id)) {\n                        await addPosition(adapter, state.val, idAlexaEchoDotTextToCommand);\n                        await this.setState(id, { ack: true });\n                    }\n\n                    if (isStateValue(state, 'boolean') && isDeleteInActiveList(id)) {\n                        await deleteOrSetAsCompleted(adapter, jsonInactive, '#delete');\n                        await this.setState(id, { ack: true });\n                    }\n\n                    if (isStateValue(state, 'boolean') && isDeleteActiveList(id)) {\n                        await deleteOrSetAsCompleted(adapter, jsonActive, 'completed');\n                        await this.setState(id, { ack: true });\n                    }\n\n                    if (isStateValue(state, 'boolean') && isToInActiveList(id)) {\n                        await shiftPosition(adapter, positionToShift, jsonActive, 'toInActiv');\n                        await this.setState(id, { ack: true });\n                    }\n\n                    if (isStateValue(state, 'boolean') && isToActiveList(id)) {\n                        await shiftPosition(adapter, positionToShift, jsonInactive, 'toActiv');\n                        await this.setState(id, { ack: true });\n                    }\n\n                    if (isStateValue(state, 'number') && isPositionToShift(id)) {\n                        positionToShift = state.val;\n                        await this.setState(id, { ack: true });\n                    }\n                } catch (e: any) {\n                    this.log.error(e);\n                }\n            }\n        });\n\n        await this.subscribeForeignStatesAsync(idAlexa2ListJson);\n\n        await this.subscribeStatesAsync(getAdapterIds.idSortActiveList);\n        await this.subscribeStatesAsync(getAdapterIds.idSortInActiveList);\n        await this.subscribeStatesAsync(getAdapterIds.idAddPosition);\n        await this.subscribeStatesAsync(getAdapterIds.idToActiveList);\n        await this.subscribeStatesAsync(getAdapterIds.idToInActiveList);\n        await this.subscribeStatesAsync(getAdapterIds.idDeleteInActiveList);\n        await this.subscribeStatesAsync(getAdapterIds.idDeleteActiveList);\n        await this.subscribeStatesAsync(getAdapterIds.idPositionToShift);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     *\n     * @param callback {() => void} The callback function\n     */\n    onUnload(callback: () => void): void {\n        try {\n            const timeouts = timeout();\n            this.clearTimeout(timeouts.getTimeout(1));\n            this.clearTimeout(timeouts.getTimeout(2));\n            this.clearTimeout(timeouts.getTimeout(3));\n\n            callback();\n        } catch (e: any) {\n            this.log.error(e);\n            callback();\n        }\n    }\n\n    async onMessage(obj: OnMessageObj): Promise<void> {\n        if (obj) {\n            switch (obj.command) {\n                case 'getDevices': {\n                    await getAlexaDevices(this, obj);\n                    break;\n                }\n                case 'getShoppinglist': {\n                    await getShoppingLists(this, obj);\n                    break;\n                }\n            }\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    /**\n     * @param [options] {object} Some options\n     */\n    module.exports = (options: Partial<utils.AdapterOptions<undefined, undefined>>) => new AlexaShoppinglist(options);\n} else {\n    // otherwise start the instance directly\n    new AlexaShoppinglist();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,YAAuB;AACvB,yBAA4B;AAC5B,iCAAoC;AACpC,oCAAuC;AACvC,2BAA8B;AAC9B,qBAAwB;AACxB,iBAAoD;AAEpD,mBAA6B;AAC7B,6BAAgC;AAChC,8BAAiC;AAEjC,MAAO,0BAAwC,MAAM,QAAQ;AAAA,EAClD,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAExC,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAEA,MAAM,UAAyB;AAC3B,UAAM,UAAU;AAChB,UAAM,KAAK,SAAS,mBAAmB,OAAO,IAAI;AAElD,UAAM;AAAA,MACF,cAAc;AAAA,MACd,QAAQ;AAAA,MACR,oBAAoB;AAAA,IACxB,IAAI,KAAK;AAQT,4CAAwB,SAAS,gBAAgB;AACjD,UAAM,EAAE,eAAe,YAAY,QAAI,uBAAW;AAElD,QAAI,kBAAkB;AACtB,QAAI,aAA6B,CAAC;AAClC,QAAI,eAA+B,CAAC;AAEpC,UAAM,oBAAoB,MAAM,KAAK,cAAc,cAAc,gBAAgB;AACjF,UAAM,sBAAsB,MAAM,KAAK,cAAc,cAAc,kBAAkB;AAErF,QAAI,kBAAoC,uDAAmB,OACpD,OAAO,kBAAkB,GAAG,IAC7B;AAEN,QAAI,oBAAsC,2DAAqB,OACxD,OAAO,oBAAoB,GAAG,IAC/B;AAEN,SAAK,IAAI,KAAK,uBAAuB;AACrC,UAAM,KAAK,SAAS,mBAAmB,MAAM,IAAI;AACjD,KAAC,EAAE,cAAc,WAAW,IAAI,UAAM;AAAA,MAClC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,QAAI,WAAgC;AACpC,UAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI;AAEJ,SAAK,GAAG,eAAe,OAAO,IAAI,UAAU;AACxC,WAAI,+BAAO,SAAO,+BAAO,SAAQ,UAAU;AACvC,mBAAW,MAAM;AACjB,YAAI;AACA,cAAI,OAAO,kBAAkB;AACzB,aAAC,EAAE,cAAc,WAAW,IAAI,UAAM;AAAA,cAClC;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AACA,gBAAI,gBAAgB,aAAa,CAAC,GAAG;AACjC,mBAAK,IAAI,MAAM,sBAAsB;AACrC,wBAAM,sDAAuB,SAAS,cAAc,SAAS;AAAA,YACjE;AAAA,UACJ;AAEA,kBACI,2BAAa,OAAO,QAAQ,MAC3B,OAAO,cAAc,oBAAoB,OAAO,cAAc,qBACjE;AACE,gBAAI,OAAO,cAAc,kBAAkB;AACvC,+BAAiB,MAAM;AAAA,YAC3B,OAAO;AACH,iCAAmB,MAAM;AAAA,YAC7B;AAEA,aAAC,EAAE,YAAY,aAAa,IAAI,UAAM;AAAA,cAClC;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACJ;AACA,kBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC;AAAA,UACzC;AAEA,kBAAI,2BAAa,OAAO,QAAQ,KAAK,cAAc,EAAE,GAAG;AACpD,sBAAM,gCAAY,SAAS,MAAM,KAAK,2BAA2B;AACjE,kBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC;AAAA,UACzC;AAEA,kBAAI,2BAAa,OAAO,SAAS,KAAK,qBAAqB,EAAE,GAAG;AAC5D,sBAAM,sDAAuB,SAAS,cAAc,SAAS;AAC7D,kBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC;AAAA,UACzC;AAEA,kBAAI,2BAAa,OAAO,SAAS,KAAK,mBAAmB,EAAE,GAAG;AAC1D,sBAAM,sDAAuB,SAAS,YAAY,WAAW;AAC7D,kBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC;AAAA,UACzC;AAEA,kBAAI,2BAAa,OAAO,SAAS,KAAK,iBAAiB,EAAE,GAAG;AACxD,sBAAM,oCAAc,SAAS,iBAAiB,YAAY,WAAW;AACrE,kBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC;AAAA,UACzC;AAEA,kBAAI,2BAAa,OAAO,SAAS,KAAK,eAAe,EAAE,GAAG;AACtD,sBAAM,oCAAc,SAAS,iBAAiB,cAAc,SAAS;AACrE,kBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC;AAAA,UACzC;AAEA,kBAAI,2BAAa,OAAO,QAAQ,KAAK,kBAAkB,EAAE,GAAG;AACxD,8BAAkB,MAAM;AACxB,kBAAM,KAAK,SAAS,IAAI,EAAE,KAAK,KAAK,CAAC;AAAA,UACzC;AAAA,QACJ,SAAS,GAAQ;AACb,eAAK,IAAI,MAAM,CAAC;AAAA,QACpB;AAAA,MACJ;AAAA,IACJ,CAAC;AAED,UAAM,KAAK,4BAA4B,gBAAgB;AAEvD,UAAM,KAAK,qBAAqB,cAAc,gBAAgB;AAC9D,UAAM,KAAK,qBAAqB,cAAc,kBAAkB;AAChE,UAAM,KAAK,qBAAqB,cAAc,aAAa;AAC3D,UAAM,KAAK,qBAAqB,cAAc,cAAc;AAC5D,UAAM,KAAK,qBAAqB,cAAc,gBAAgB;AAC9D,UAAM,KAAK,qBAAqB,cAAc,oBAAoB;AAClE,UAAM,KAAK,qBAAqB,cAAc,kBAAkB;AAChE,UAAM,KAAK,qBAAqB,cAAc,iBAAiB;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,UAA4B;AACjC,QAAI;AACA,YAAM,eAAW,wBAAQ;AACzB,WAAK,aAAa,SAAS,WAAW,CAAC,CAAC;AACxC,WAAK,aAAa,SAAS,WAAW,CAAC,CAAC;AACxC,WAAK,aAAa,SAAS,WAAW,CAAC,CAAC;AAExC,eAAS;AAAA,IACb,SAAS,GAAQ;AACb,WAAK,IAAI,MAAM,CAAC;AAChB,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAEA,MAAM,UAAU,KAAkC;AAC9C,QAAI,KAAK;AACL,cAAQ,IAAI,SAAS;AAAA,QACjB,KAAK,cAAc;AACf,oBAAM,wCAAgB,MAAM,GAAG;AAC/B;AAAA,QACJ;AAAA,QACA,KAAK,mBAAmB;AACpB,oBAAM,0CAAiB,MAAM,GAAG;AAChC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAKzB,SAAO,UAAU,CAAC,YAAiE,IAAI,kBAAkB,OAAO;AACpH,OAAO;AAEH,MAAI,kBAAkB;AAC1B;",
  "names": []
}
