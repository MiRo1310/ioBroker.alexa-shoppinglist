{
  "version": 3,
  "sources": ["../../src/app/updateListsOnChange.ts"],
  "sourcesContent": ["import { firstLetterToUpperCase, sortList } from '../lib/utils';\nimport { addPositionNumberAndBtn } from './addPosition';\nimport { writeState } from './writeState';\nimport type AlexaShoppinglist from '../main';\nimport type { AlexaList, ShoppingList, SortByTime1Alpha2 } from '../types/types';\nimport { errorLogger } from './logging';\n\nexport const updateListsOnChange = async (\n    adapter: AlexaShoppinglist,\n    sortListActive: SortByTime1Alpha2,\n    sortListInActive: SortByTime1Alpha2,\n    alexaState: string,\n): Promise<{\n    jsonActive: ShoppingList[];\n    jsonInactive: ShoppingList[];\n    error: boolean;\n}> => {\n    let alexaListJson: ioBroker.State | null | undefined = {} as ioBroker.State;\n    try {\n        alexaListJson = await adapter.getForeignStateAsync(alexaState);\n\n        if (alexaListJson?.val && typeof alexaListJson.val == 'string') {\n            const alexaList = JSON.parse(alexaListJson.val) as AlexaList[];\n\n            let jsonActive: ShoppingList[] = [];\n            let jsonInactive: ShoppingList[] = [];\n\n            for (const element of alexaList) {\n                if (!element.completed) {\n                    pushToList(jsonActive, element);\n                } else {\n                    pushToList(jsonInactive, element);\n                }\n            }\n\n            jsonActive = sortList(jsonActive, sortListActive);\n            jsonInactive = sortList(jsonInactive, sortListInActive);\n            addPositionNumberAndBtn(adapter, jsonActive, 'active');\n            addPositionNumberAndBtn(adapter, jsonInactive, 'inactive');\n            writeState(adapter, jsonActive, jsonInactive);\n            return { jsonActive, jsonInactive, error: false };\n        }\n        return { jsonActive: [], jsonInactive: [], error: true };\n    } catch (e: any) {\n        errorLogger('Error update list on change', e, adapter);\n\n        return { jsonActive: [], jsonInactive: [], error: true };\n    }\n};\n\nfunction pushToList(list: ShoppingList[], element: AlexaList): ShoppingList[] {\n    list.push({\n        name: firstLetterToUpperCase(element.value ?? ''),\n        time: new Date(element.createdDateTime).toLocaleString(),\n        ts: new Date(element.createdDateTime).getTime(),\n        id: element.id,\n    });\n    return list;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiD;AACjD,yBAAwC;AACxC,wBAA2B;AAG3B,qBAA4B;AAErB,MAAM,sBAAsB,OAC/B,SACA,gBACA,kBACA,eAKE;AACF,MAAI,gBAAmD,CAAC;AACxD,MAAI;AACA,oBAAgB,MAAM,QAAQ,qBAAqB,UAAU;AAE7D,SAAI,+CAAe,QAAO,OAAO,cAAc,OAAO,UAAU;AAC5D,YAAM,YAAY,KAAK,MAAM,cAAc,GAAG;AAE9C,UAAI,aAA6B,CAAC;AAClC,UAAI,eAA+B,CAAC;AAEpC,iBAAW,WAAW,WAAW;AAC7B,YAAI,CAAC,QAAQ,WAAW;AACpB,qBAAW,YAAY,OAAO;AAAA,QAClC,OAAO;AACH,qBAAW,cAAc,OAAO;AAAA,QACpC;AAAA,MACJ;AAEA,uBAAa,uBAAS,YAAY,cAAc;AAChD,yBAAe,uBAAS,cAAc,gBAAgB;AACtD,sDAAwB,SAAS,YAAY,QAAQ;AACrD,sDAAwB,SAAS,cAAc,UAAU;AACzD,wCAAW,SAAS,YAAY,YAAY;AAC5C,aAAO,EAAE,YAAY,cAAc,OAAO,MAAM;AAAA,IACpD;AACA,WAAO,EAAE,YAAY,CAAC,GAAG,cAAc,CAAC,GAAG,OAAO,KAAK;AAAA,EAC3D,SAAS,GAAQ;AACb,oCAAY,+BAA+B,GAAG,OAAO;AAErD,WAAO,EAAE,YAAY,CAAC,GAAG,cAAc,CAAC,GAAG,OAAO,KAAK;AAAA,EAC3D;AACJ;AAEA,SAAS,WAAW,MAAsB,SAAoC;AAlD9E;AAmDI,OAAK,KAAK;AAAA,IACN,UAAM,sCAAuB,aAAQ,UAAR,YAAiB,EAAE;AAAA,IAChD,MAAM,IAAI,KAAK,QAAQ,eAAe,EAAE,eAAe;AAAA,IACvD,IAAI,IAAI,KAAK,QAAQ,eAAe,EAAE,QAAQ;AAAA,IAC9C,IAAI,QAAQ;AAAA,EAChB,CAAC;AACD,SAAO;AACX;",
  "names": []
}
